class String
  def end_with?(s)
    self[-s.length..-1] == s
  end
  def start_with?(prefix)
    self[0...prefix.length] == prefix
  end
end

def File.write(filepath, content)
  File.open(filepath, 'w') {|f| f.write(content) }
end

def _debug(str)
  $stderr.puts "*** debug: #{str}" if ENV['DEBUG']
end

def mark_en(str); str.gsub(/^(?=.)/, ".EN\t"); end
def mark_ja(str); str.gsub(/^(?=.)/, ".JA\t"); end

def unmark_en(str); str.gsub(/^\.EN\t/, ""); end
def unmark_ja(str); str.gsub(/^\.JA\t/, ""); end

def remove_en(str); str.gsub(/^\.EN\t.*\n/, ''); end
def remove_ja(str); str.gsub(/^\.JA\t.*\n/, ''); end

def remove_tabs(str); str.gsub(/^\t/, ''); end

EN_DIR = ".."


desc "remove or revert *.md files."
task :clean do |t|
  clean_md_files()
end

desc "same as 'rake clean'"
task :default => :clean

def clean_md_files
  #rm_f Dir.glob("**/*.md")
  Dir.glob("**/*.md").each {|filename| File.unlink(filename) }
  filenames = `git status`.scan(/\tdeleted:\s+(.*?\.md)$/).flatten
  #sh "git checkout #{filenames.join(' ')}"
  system *['git', 'checkout', filenames].flatten
end


desc "display output of 'git status' except '*.md' files"
task :status do |t|
  #sh "git status | egrep '	(modifield:   ).*\\.md$'"
  sh "git status | egrep -v '[ \t]([0-9].*|toc)\\.md$'"
end


## usage: rake path/to/file.md.trans   # create *.trans from ../en/path/to/file.md
desc "add '.EN' prefix and save as '*.trans' file"
#rule '.trans' => proc {|path| "#{EN_DIR}/#{path.sub(/\.trans\z/, '')}" } do |t|   # infinite recursive
rule(/\A(\d.*|toc)\.md\.trans\z/ => proc {|path| "#{EN_DIR}/#{path.sub(/\.trans\z/, '')}" }) do |t|
  #p t.name
  #p t.source
  trans_path = t.name
  en_path    = t.source
  create_trans_file(trans_path, en_path)
end

## usage1:  rake trans F=../en/path/to/file.md    # create *.trans
## usage2:  rake trans F=path/to/file.md          # create *.trans
## usage3:  rake trans                                 # create all *.trans
desc "add '.EN' prefix and save as '*.trans' file"
task :trans do |t|
  filepath = ENV['F']
  filepaths = filepath ? filepath : Dir.glob("#{EN_DIR}/**/*.md")
  filepaths.each do |filepath|
    basepath = filepath.sub(/\.trans\z/, '')
    if basepath.start_with?(EN_DIR)
      basepath = basepath[(EN_DIR.length+1)..-1]
    end
    en_path = File.join(EN_DIR, basepath)
    trans_path = basepath + '.trans'
    create_trans_file(trans_path, en_path)
  end
end

def create_trans_file(trans_path, en_path)
  if File.exist?(trans_path) && File.read(trans_path) =~ /^\.JA\t/
    puts "** #{trans_path}: already has JA contents. skipped."
  else
    s = File.read(en_path)
    dir = File.dirname(trans_path)
    mkdir_p dir unless File.directory?(dir)
    puts "[create] #{trans_path}"
    File.write(trans_path, mark_en(s))
  end
end


## usage1: rake diff F=path/to/file.md.trans   # for a *.trans file
## usage2: rake diff                                # for all *.trans
desc "show diff between *.trans and original (optional: F=filename)"
task :diff do |t|
  filepath = ENV['F']
  filepaths = filepath ? [filepath] : Dir.glob("**/*.trans")
  filepaths.each do |filepath|
    trans_path = filepath
    trans_path += '.trans' unless trans_path.end_with?('.trans')
    en_path = File.join(EN_DIR, trans_path.sub(/\.trans\z/, ''))
    tmp_path = trans_path + '.EN'
    s = File.read(trans_path)
    s = remove_tabs(unmark_en(remove_ja(s)))
    if s != File.read(en_path)
      begin
        File.write(tmp_path, s)
        command = ['diff', '-u', tmp_path, en_path]
        $stdout.puts command.join(' ')
        system *command
      ensure
        File.unlink(tmp_path) if File.exist?(tmp_path)
      end
    end
  end
end


## usage: rake path/to/file.md   # create *.md file from *.md.trans
desc "retrieve '.JA' from *.trans file and save as *.md."
rule '.md' => '.md.trans' do |t|
  ja_path    = t.name
  trans_path = t.source
  create_ja_md_file(ja_path, trans_path)
end

## usage1: rake ja F=path/to/file.md.trans  # for a *.trans file
## usage2: rake ja                                # for all *.trans
desc "retrieve '.JA' from *.trans (optional: F=filename)"
task :ja do |t|
  filepath = ENV['F']
  filepaths = filepath ? [filepath] : Dir.glob("**/*.trans")
  filepaths.each do |filepath|
    trans_path = filepath
    trans_path += '.trans' unless filepath.end_with?('.trans')
    ja_path = trans_path.sub(/\.trans\z/, '')
    create_ja_md_file(ja_path, trans_path)
  end
end

def create_ja_md_file(ja_path, trans_path)
  $stdout.puts "* #{trans_path} -> #{ja_path}"
  s = File.read(trans_path)
  File.write(ja_path, remove_tabs(unmark_ja(remove_en(s))))
end
